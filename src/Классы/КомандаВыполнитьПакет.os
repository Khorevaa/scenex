
///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Перем Лог;

// Интерфейсная процедура, выполняет регистрацию команды и настройку парсера командной строки
//   
// Параметры:
//   ИмяКоманды 	- Строка										- Имя регистрируемой команды
//   Парсер 		- ПарсерАргументовКоманднойСтроки (cmdline)		- Парсер командной строки
//
Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Последовательно выполняет команды по сценариям, заданным в файлах (json)");

	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, 
		"Сценарии",
		"Файлы JSON содержащие последовательность команд и значения параметров,
		|могут быть указаны несколько файлов разделенные "";""
		|(обработка файлов выполняется в порядке следования)");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры //ЗарегистрироватьКоманду()

// Интерфейсная процедура, выполняет текущую команду
//   
// Параметры:
//   ПараметрыКоманды 	- Соответствие						- Соответствие параметров команды и их значений
//
// Возвращаемое значение:
//	Число - код возврата команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
	ПутьКСценариям	= ПараметрыКоманды["Сценарии"];

	Сценарии = ЧтениеСценариев.ПрочитатьСценарии(ПутьКСценариям);

	ВозможныйРезультат = МенеджерКомандПриложения.РезультатыКоманд();
	
	Если Сценарии.Количество() = 0 Тогда
		Лог.Ошибка("Не указано ни одного файла сценария для обработки");
		Возврат ВозможныйРезультат.НеверныеПараметры;
	КонецЕсли;

	Попытка
		ВыполнитьСценарии(Сценарии);

		Возврат ВозможныйРезультат.Успех;
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Возврат ВозможныйРезультат.ОшибкаВремениВыполнения;
	КонецПопытки;

КонецФункции

// Последовательно выполняет переданные сценарии
//   
// Параметры:
//   Сценарии				- Массив - Массив сценариев для выполнения
//
Процедура ВыполнитьСценарии(Сценарии)
	
	Для Каждого ТекСценарий Из Сценарии Цикл
		Лог.Информация("Выполняется сценарий ""%1""", ОбъединитьПути(ТекущийКаталог(), ТекСценарий.ПутьКФайлу));
		ВыполнитьСценарий(ТекСценарий.Сценарий);
	КонецЦикла;

КонецПроцедуры //ВыполнитьСценарии()

// Выполняет изменение версии подсистемы конфигурации в хранилище конфигурации
//   
// Параметры:
//   Сценарий					- Соответствие - Последовательность команд с параметрами для выполнения
//
Процедура ВыполнитьСценарий(Сценарий)
	
	ОбщиеПараметры = Новый Массив();

	Если Сценарий.Свойство("params") Тогда
		ОбщиеПараметры = Сценарий["params"];
	КонецЕсли;

	Если НЕ ТипЗнч(ОбщиеПараметры) = Тип("Массив") Тогда
		ОбщиеПараметры = Новый Массив();
	Иначе
		Лог.Отладка("Прочитаны общие параметры");
	КонецЕсли;

	ШагиСценария = Сценарий["stages"];

	Если НЕ (ТипЗнч(ШагиСценария) = Тип("Структура")
		ИЛИ ТипЗнч(ШагиСценария) = Тип("Соответствие")) Тогда
		Лог.Ошибка("Не найдены шаги сценария");
		Возврат;
	КонецЕсли;

	Для Каждого ТекШаг Из ШагиСценария Цикл
		Лог.Информация("Выполняется шаг ""%1""", ТекШаг.Ключ);
		ВыполнитьШагСценария(ТекШаг.Значение, ОбщиеПараметры);
	КонецЦикла;
	
КонецПроцедуры //ВыполнитьСценарий()

// Выполняет изменение версии подсистемы конфигурации в хранилище конфигурации
//   
// Параметры:
//   Сценарий					- Соответствие - Последовательность команд с параметрами для выполнения
//
Процедура ВыполнитьШагСценария(Шаг, Знач ОбщиеПараметры)
	
	ПозиционныеПараметры = Новый Массив();
	ИменованныеПараметры = Новый Соответствие();
	Флаги = Новый Массив();

	Для Каждого ТекПараметр Из ОбщиеПараметры Цикл
		Если ТипЗнч(ТекПараметр) = Тип("Соответствие")
		 ИЛИ ТипЗнч(ТекПараметр) = Тип("Структура") Тогда
			Для Каждого ТекЭлемент Из ТекПараметр Цикл
				Если ПустаяСтрока(ТекЭлемент.Значение) Тогда
					Флаги.Добавить(ТекЭлемент.Ключ);
				Иначе
					ИменованныеПараметры.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПозиционныеПараметры.Добавить(ТекПараметр);
		КонецЕсли;
	КонецЦикла;

	ПараметрыШага = Новый Соответствие();

	Если Шаг.Свойство("params") Тогда
		ПараметрыШага = Шаг["params"];
	КонецЕсли;

	Если НЕ ТипЗнч(ПараметрыШага) = Тип("Массив") Тогда
		ПараметрыШага = Новый Массив();
	Иначе
		Лог.Отладка("Прочитаны параметры шага");
	КонецЕсли;

	Для Каждого ТекПараметр Из ПараметрыШага Цикл
		Если ТипЗнч(ТекПараметр) = Тип("Соответствие")
		 ИЛИ ТипЗнч(ТекПараметр) = Тип("Структура") Тогда
			Для Каждого ТекЭлемент Из ТекПараметр Цикл
				Если ПустаяСтрока(ТекЭлемент.Значение) Тогда
					Флаги.Добавить(ТекЭлемент.Ключ);
				Иначе
					ИменованныеПараметры.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПозиционныеПараметры.Добавить(ТекПараметр);
		КонецЕсли;
	КонецЦикла;

	ВыполнитьВнешнююКоманду(Шаг["tool"], Шаг["command"], ПозиционныеПараметры, ИменованныеПараметры, Флаги);

КонецПроцедуры //ВыполнитьШагСценария()

Функция ВыполнитьВнешнююКоманду(ИсполняемыйФайл, Команда, ПозиционныеПараметры, ИменованныеПараметры, Флаги)

	Лог.Информация("Выполняется  ""%1"", команда ""%2""", ИсполняемыйФайл, Команда);
	
	КомандаРК = Новый Команда;
	
	КомандаРК.УстановитьКоманду(ИсполняемыйФайл);
	КомандаРК.ДобавитьПараметр(Команда);
	Для Каждого ТекПараметр Из ПозиционныеПараметры Цикл
		КомандаРК.ДобавитьПараметр(ТекПараметр);
	КонецЦикла;
	Для Каждого ТекПараметр Из ИменованныеПараметры Цикл
		КомандаРК.ДобавитьПараметр(ТекПараметр.Ключ + " " + ТекПараметр.Значение);
	КонецЦикла;
	Для Каждого ТекПараметр Из Флаги Цикл
		КомандаРК.ДобавитьПараметр(ТекПараметр);
	КонецЦикла;

	КомандаРК.УстановитьИсполнениеЧерезКомандыСистемы(Истина);
	КомандаРК.ПоказыватьВыводНемедленно(Истина);
	
	КодВозврата = КомандаРК.Исполнить();

	ОписаниеРезультата = КомандаРК.ПолучитьВывод();

	Возврат КодВозврата;

КонецФункции

Лог = Логирование.ПолучитьЛог("ktb.app.scenex");